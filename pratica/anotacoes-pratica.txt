docker run --rm --name  laravel -p 8000:8000 vssouza7/laravel

Expondo a porta 8000.

Como o laravel ta rodando em desenvolvimento, o serv de desenv esta programando para rodar apenasa na porta 127.0.0.1 do Container. Como Estoua cessando fora, não
estou acessando por esse endereç, então, ele não vai funcionar.
Teria que deixar esse acesso liberado para qualquer host.

Lembrando que entrypoint é o comando de entrada do nosso container, e o CMD, são os "parametros" para o entrypoinit.

O entrypoint não pode ser substituido, mas o cmd pode.

Matando o container só com o inicio do ID dele, p/ex:
docker rm -f 7de

Para rodarmos o nosso container, utilizamos o comando:
docker run --rm -d --name laravel -p 8000:8000 vssouza7/laravel

Para sabermos o que está acontecendo no nosso container, validamos o log com o seguinte comando:
docker logs <nomedocontainer>

o CMD é basicamente "anexado" ao entrypoint. O cmd também pode ser substituido. Por exemplo:
Se especificamos que o nosso container vai rodar na porta 8000 no Docker file, podemos passar o mesmo parametro quando formos subir, colocando depois das
informacoes da imagem
p/ex:
# Dockerfile
CMD ["--host=0.0.0.0"]
# Comando para subir container
docker run --rm -d --name laravel -p 8001:8001 vssouza7/laravel --host=0.0.0.0 --port=8001

Basta mapearmos os passos que fizemos no container, como instalação e preparação de ambiente, que temos um
roteiro para add no Dockerfile

Parte do NODE:
A nossa ideia agora, eh compartilhar a pasta do nosso computador, com o container que for rodar.
Pq ai consigo alterar no meu computador e ver o resultado no meu container.

Para compartilharmos o nosso volume, colocamos o parametro "-v"

Ao rodar o comando abaixo, estamos criando uma nova imagem para o Docker, iremos rodar um node 15 de forma interativa entrando no container
pelo bash, compartilhando no host 3000 e porta 3000, compartilhando o volume da nossa pasta atual, 
para a pasta do container /usr/src/app/.
Com isso, tudo que escrevermos no nosso container, vai aparecer na nossa maquina, e vice-versa
docker run --rm -it -v $(pwd)/:/usr/src/app -p 3000:3000 node:15 bash

Não existe mais compartilhamento de arquivos, quando vou gerar a minha img. Quando vou gerar minha img
eu tenho que colocar tudo dentro delas.
Quero pegar nossos arquivos da nosso projeto do visual studio, e jogar para o nosso container, ou da imagem que estou gerando.

Para isso, utilizamos o "COPY . .", ou seja, vou copiar tudo que esta na pasta que estou desenvolvendo e dando o build
e vou jogar na pasta "app" para mim.

Com o comando abaixo, outros containers podem ter acesso ao nosso container através dessa porta
Expose <numerodaporta>

Buildando o nosso projeto NODE
docker build -t vssouza7/hello-express .

Rodando para ver se os passos do nosso Dockerfile deram certo
docker run -p 3000:3000 vssouza7/hello-express:latest

Subindo a nossa imagem para os repositorios do Dockerhub
docker push vssouza7/hello-express

Uma coisa comum d e acontecer, é quando trabalhamos com mais de 1 Dockerfile, p/ex. Dockerfile e Dockerfile.prod
O prod tem o Copy, que é para copiar tudo que ta na imagem, e guarda para empacotar. 
Para darmos um docker-build somente em um Dockerfile, devemos rodar o seguinte ocmando dentro da pasta com os Dockerfiles:
docker build -t vssouza7/hello-express . -f Dockerfile.prod

Garantimos que podemos trabalhar com uma versão local e outra de publicação.

========== OTIMIZANDO AS IMGs ==========
Quando estamos trabalhando normalmente em modulo de desenv, vamos sempre utilizar uma img Docker que temos varios 
recursos instalados, no caso do PHP, trabalhamos com uma img debian aonde instalamos os pacotes via apt-get, instalamos o Laravel

Se fossemos colocar em PRD, queriamos uma img mais "enxuta", quanto menor a img, melhor. É mais rapido para subir, baixar e tem menos
chance de vulnerabilidade de segurança.

Nosso objetivo nesse capitulo agora, é gerar uma img para PRD. Ela vai ter 2 pontos importantes, vamos colocar o nginx como
serv de proxy reverso, ou seja, toda requisicao vai bater no nginx, ele vai chamar outro container PHP, o PHP vai retornar para o
Nginx e o Nginx vai retornar para o usuário final.
Para fazermos isso, vamos rodar o PHP no modo fast-cgi(eu acho q eh esse o nome).
Vamos utilizar o alpine linux para reduzir o tamanho da img.

Como vamos utilizar o Alpine, vamos aprender a trabalhar com multi-staged-building. A ideia dele, é quef azemos o processo de build
da img em 1 ou 2 etapas.
Tenho o stage inicial, o próximo otimizamos a img.

Toda vez que mudarmos a nomenclatura

parei em 10:29 do video "Otimizando Imagens - Otimizacao utilizando Multistage Building", antes de dar problema e congelar na etapa do chown

docker build -t vssouza7/laravel:prod laravel -f laravel/Dockerfile.prod

############### Nginx como proxy reverso
Vamos fazer com que o Nginx consiga trabalhar ocm proxy reverso. Todos que bater em
nginx, vai chamar o PHP, o PHP vai retornar para o nginx, para o nginx retornar o resultado final.

Pode fazer p/ qualquer linguagem. com o Nginx conseguimos trabalhar com SSL, e outras coisas deste tipo
que eventualmente outros servidores web não fazem. Em geral, é recomendado colocar o nginx de frente.

O Nginx possui um arquivo chamado de "nginx.conf", que configuramos os nossos dominios que vamos trabalhar.
No nosso caso, vamnos trabalhar apenas com um host que vamos utilizar com o laravel.

Vamos passar uma URL(nome do servodr), na porta 9000 para o nginx.conf

No arquivo nginx.conf, na linha 12, acontece o seguinte:
Tudo que acessarmos em relação a arquivo e que tiver .php no final, ele vai pegar o nome do arquivo ".php" e vai pedir
para ele ser executado, no servidor, cujo nome é laravel, na porta 9000.
e na linha 15, passamos o caminho e os parametros caso esse cara que vai rodar precise.
linha 19: quando acessarmos qualquer endereço, com por exemplo, "/index" ou "/home" no nosso sistema, ele vai pegar essa url e vai
passar na linha 20, ai o laravel vai dar conta de trabalhar com essas URLs

Na linha 26, caso tenmha alguma pagina 404, ele vai redirecionar para o index

e as ultimas linhas, é utilizado para o "let's encrypt".

Uma coisa importante, para o nginx funcionar, temos que criar pelo menos um arquivo php nem que ele esteja vazio,
para que quando alguém acessar qualquer coisa, ele bater no arquivo PHP, e fazer a chamada remota, caso contrário acontece 404.


Quando a pessoa acessar qualquer endereço do nginx, o arquivo index.php tem que existir no nginx,
nem que o arquivo esteja vazio. Pq quando ele for chamado, o nginx vai chamar o nosso php em outro container.
Se esse arquivo não existir, o nginx retorna 404.

Criando o pacote e "taggeando".
docker build -t vssouza7/nginx:prod . -f Dockerfile.prod

Criado uma nova rede(por padrão é bridge ):
docker network create laranet

Rodando a nossa img
docker run -d --network laranet --name laravel vssouza7/laravel:prod

Com isso, finalizamos a criação do nosso container. Lembrando que ele está exposto apenas pra rede Laranet, e não pro meu computador
Quem estiver na rede laranet, consegue acessar a porta 9000 do meu container laravel.

Fazendo o nginx trabalhar(-p libero a porta, no caso, é a 8080, que vamos acessar 80 do nginx.)
docker run -d --network laranet --name nginx -p 8080:80 vssouza7/nginx:prod

Pegando os logs do container nginx:
docker logs nginx

Link simbólico(só funciona no linux ou mac. Img docker tbm funciona), imaginando que quero
criar uma pasta atalho chamada "wesley". Quando acessar a pasta wesley, mostrar o conteudo da pasta html.

Como nosso laravel possui uma pasta public, e queremos mandar o kra para a pasta html, vou simplesmente criar um
link simbolico. Entao quando alguem acessar a html, ele vai ver o conteudo da public. Criamos um link simbolico para isso.

Criando link simbolico wesley para a pasta html
ln -s html/ wesley

vamos deletar as pastas do laravel e nginx para refazermos a img.

Dando build no nginx:
docker build -t vssouza7/nginx:prod . -f Dockerfile.prod

E no laravel:
docker build -t vssouza7/laravel:prod laravel -f laranet/Dockerfile.prod
=================================================================================================================================================

O docker possui comandos dificeis, podemos facilitar todo esse process trabalhando com o Docker-compose. Ele é uma ferramenta complementar ao Docker, que baseado
num arquivo  de manifesto/yaml, ele consegue pegar todos os containers que queremos subir, e ele sobe de uma vez de forma automatica.
Com apenas 1 comando, temos o Docker com todos os containers funcionando. Normalmente, todos os projetos que pegarmos com o Docker por ai, provavelmente vamos ver
um arquivo do Docker-compose, e como ele vai conseguir nos ajudar.

O arquivo docker-compose.yaml vai determinar/especificar quais são os serviços que quermos subir com o docker-compose.
 
O comando "docker rm $(docker ps -a -q) -f" deleta todos os pods da consulta

Subimos utilizando o docker-compose, com o comando:
docker-compose up

Up sobe todos os nossos containers, e o down, vai fazer com que seja removido os nossos containers

Podemos rodar o container no docker-compose sem que ele "trave" o nosso terminal, e vai "desattachar" os processos do docker-compose do terminal, com o comando:
docker-compose up -d

o docker-compose down, desce todos os servicos

Podemos perceber também, que o docker-compose está utilizando os mesmos dockerfile's que estavamos trabalhando.
Se mexermos no nosso dockerfile, o docker-compose não sabe que mexemos, porém, para fazermos com que ele saiba, rodamos o comando, toda vez que alterarmos o dockerfile:
docker-compose up -d --build

o --build vai "rebuildar" as imagens para mim. Ele vai perceber a imagem que ele tem antes e a que ele tem agora. Então tudo que mudei na img, ele vai gerar a atualizacao.
o Docker

Podemos deixar o nome de uma img fixa no "image", para o docker sabermos o que estamos trabalhando.
============================================================================================================================================================